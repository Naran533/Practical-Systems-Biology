import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

## Simulate the trajectories of the third protein (p3) in a negative-feedback model
# Fixed value: b and six different maximum rate of transcription values (a)
# In the genetic oscillator model, inputs are:
#   initial concentration of mRNA (mi)
#   repressor encoded by mRNA (pi)
#   time units (t)
#   and ratio of mRNA to protein lifetimes (b)

def Oscillator(y, t, a, b = 10):
    m1 = y[0]
    m2 = y[1]
    m3 = y[2]
    p1 = y[3]
    p2 = y[4]
    p3 = y[5]

    dydt = np.empty(len(y))
    # Concentration of mRNA
    dydt [0] = -m1 + (a / (1 + p3**2) )
    dydt [1] = -m2 + (a / (1 + p1**2) )
    dydt [2] = -m3 + (a / (1 + p2**2) )
    # Concentration of protein
    dydt [3] = -b * (p1 - m1)
    dydt [4] = -b * (p2 - m2)
    dydt [5] = -b * (p3 - m3)

    return dydt

# Set values of a
av = np.arange(12, 18)
# Set initial values of mRNA and protein
init = [0, 0, 0, 0, 0, 1]
t = np.arange(0, 200)

for i in range(6):
    y = odeint(Oscillator, init, t, args = (av[i], ))

    # Print six graphs in one figure
    plt.subplot(6, 1, i + 1)
    plt.plot( t, y[:, 3], label = 'Protein 3' )
    plt.title( 'a = %.1f' %(av[i]), fontsize = 10 )
    plt.xlabel( 'Time Unit', fontsize = 7 )
    plt.ylabel( 'Protein 3', fontsize = 7 )
    plt.tick_params( axis = 'both', which = 'major', labelsize = 7)

plt.suptitle( 'Protein 3 Trajectories for Different Values of a' )
plt.show()


## Form a grid of a and b values to classify the behaviour as either oscillaroty or steady-state
n = 10
# Amount of data
grid = np.zeros(shape = (n, n))
# State of the system

init = [0, 0, 0, 0, 0, 1]
t = np.arange(0, 1000, 10)
a = np.logspace(1.0, 3.0, num = n)
b = np.logspace(-1.0, 3.0, num = n)

for i in range(len(a)):
# Set a on x-axis, loop each point
    for j in range(len(b)):
    # Set b on y-axis
        y = odeint( Oscillator, init, t, args = (a[i], b[j]), mxstep = 10000 )
        # Limit the number of max steps
        v = abs( np.diff( y[-10:, 3] ) )
        # Get the last 10 values and get the difference value (0, 1)
        if all(v < 0.1):
            grid[j, i] = 0
        else:
            grid[j, i] = 1
            # Return TRUE (steady state) pf all the elements < 1

A, B = np.meshgrid(a, b)
# Matrix of a and b values

fig = plt.figure( figsize = (7, 7) )
# Assign two levels: 0, steady state; 1, oscillation
# Plot all the contours of the minimum value
plt.contourf( A, B, grid, levels = [0, 1], extend = 'min', colors = ('w', 'b') )
plt.title( 'Bifurcation Diagram', fontsize = 15 )
plt.xscale( 'log' )
plt.yscale( 'log' )
plt.xlabel( 'Maximum Number of mRNAs Transcribed per Unit Time' )
plt.ylabel( 'Ratio of mRNA to Protein Lifetimes' )
plt.colorbar( shrink = 0.7, extend = 'min' )

plt.show(fig)
fig.savefig( 'Classification the Behaviour of Oscillaroty and Steady-state' )
